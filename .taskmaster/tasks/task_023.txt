# Task ID: 23
# Title: Implement Datalog Query Engine for TripleStore
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Develop a Datalog-style query engine within the TripleStore to enable complex, declarative query capabilities directly on the server, offloading logic from the client.
# Details:
This task involves a significant enhancement to the server-side TripleStore. Key steps include:

1.  **Datalog Language Definition**: Define a precise subset of Datalog (or a Datalog-like language) that aligns with the TripleStore's data model. This should include support for basic predicates, rules, recursion, and potentially stratified negation or aggregation.
2.  **Parser Implementation**: Develop a robust parser to convert Datalog query strings and rule definitions into an internal Abstract Syntax Tree (AST) representation.
3.  **Query Optimizer Design**: Implement a query optimizer responsible for transforming the AST into an efficient execution plan. This may involve techniques like goal reordering, join optimization, and index utilization strategies.
4.  **Execution Engine Development**: Build the core Datalog evaluation engine. This will likely involve implementing algorithms such as semi-naive evaluation for recursive rules, or other established Datalog evaluation techniques. The engine must efficiently interact with the underlying TripleStore data structures to retrieve and process triples.
5.  **TripleStore Integration Layer**: Create a dedicated API or module within the TripleStore that allows the Datalog engine to seamlessly access, query, and potentially update (if write capabilities are included) the stored triples.
6.  **Client-Server Interface**: Define and implement a new server-side endpoint (e.g., via HTTP POST or WebSocket messages) specifically for receiving Datalog queries from clients and returning structured results. This will require careful consideration of serialization formats for queries and results.
7.  **Error Handling and Debugging**: Implement comprehensive error reporting for syntax errors, logical inconsistencies in rules, and runtime execution failures. Provide logging and potential tracing mechanisms to aid in debugging complex Datalog programs.

# Test Strategy:
A multi-faceted testing approach is crucial for this complex component:

*   **Unit Tests**: Develop extensive unit tests for each sub-component:
    *   **Parser**: Test with a wide range of valid and invalid Datalog syntax, ensuring correct AST generation and error handling.
    *   **Optimizer**: Test specific optimization rules (e.g., join reordering, predicate pushdown) with small, controlled query plans.
    *   **Execution Engine**: Test core evaluation logic with small datasets and simple rules (non-recursive, recursive, with negation) to verify correct inference and query results.
*   **Integration Tests**: 
    *   Set up a dedicated test TripleStore instance populated with diverse sample data.
    *   Execute complex Datalog queries and rule sets against this instance, verifying the results against known expected outcomes.
    *   Test the end-to-end client-server interface by sending Datalog queries from a mock client and asserting the correctness and format of the received responses.
    *   Verify the engine's ability to handle various data types and edge cases present in the TripleStore.
*   **Performance Tests**: 
    *   Conduct performance benchmarks with large datasets and increasingly complex/recursive queries to identify bottlenecks and ensure acceptable query execution times.
    *   Evaluate the engine's scalability under concurrent query loads.
*   **Regression Tests**: Ensure that the introduction of the Datalog engine does not negatively impact the performance or stability of existing TripleStore functionalities.

# Subtasks:
## 1. Design Datalog Query Structure [done]
### Dependencies: None
### Description: Define the structure for Datalog-like queries that the `TripleStore` will accept, including clauses, variables, and rules.
### Details:
Define a precise subset of Datalog (or a Datalog-like language) that aligns with the TripleStore's data model. This should include support for basic predicates, rules, recursion, and potentially stratified negation or aggregation. This forms the foundational specification for the Datalog language to be implemented.

## 2. Implement Datalog Query Parser in TripleStore [done]
### Dependencies: 23.1
### Description: Add a method to `TripleStore` to parse these Datalog queries.
### Details:
Develop a robust parser to convert Datalog query strings and rule definitions into an internal Abstract Syntax Tree (AST) representation, based on the Datalog structure defined in subtask 23.1. This parser must handle syntax validation and provide clear error reporting for malformed queries.

## 3. Implement Datalog Query Engine in TripleStore [done]
### Dependencies: 23.1, 23.2
### Description: Build the core logic to execute parsed Datalog queries against the stored triples, including unification and finding variable bindings.
### Details:
Build the core Datalog evaluation engine. This will likely involve implementing algorithms such as semi-naive evaluation for recursive rules, or other established Datalog evaluation techniques. It must efficiently interact with the underlying TripleStore data structures to retrieve and process triples, including unification and finding variable bindings. This subtask also encompasses the design and implementation of a query optimizer responsible for transforming the AST into an efficient execution plan, potentially involving techniques like goal reordering, join optimization, and index utilization strategies.
<info added on 2025-09-04T19:22:55.268Z>
Specifically, multiple attempts to implement the Datalog join algorithm have failed due to persistent issues in correctly handling the unification of clauses with existing variable bindings. This indicates a fundamental misunderstanding of the required logic for variable binding propagation and unification during joins. A complete re-evaluation and redesign of the Datalog join algorithm, focusing on robust and correct unification, is required before proceeding.
</info added on 2025-09-04T19:22:55.268Z>

## 4. Expose Datalog Query Method from TripleStore [done]
### Dependencies: 23.3
### Description: Create a public `datalogQuery` method on `TripleStore`.
### Details:
Create a dedicated API or module within the TripleStore that allows the Datalog engine to seamlessly access, query, and potentially update (if write capabilities are included) the stored triples. Define and implement a new server-side endpoint (e.g., via HTTP POST or WebSocket messages) specifically for receiving Datalog queries from clients and returning structured results. This will require careful consideration of serialization formats for queries and results.

## 5. Refactor client.ts to use new TripleStore query method [deferred]
### Dependencies: 23.4
### Description: Update the `query` implementation in `client.ts` to use the new, more powerful query capabilities of the `TripleStore`, simplifying the client-side logic.
### Details:
This is a client-side task. It involves modifying the existing client-side `query` logic to leverage the new server-side Datalog engine. This will likely involve sending Datalog query strings to the server and processing the structured results received back, thereby offloading complex query logic from the client and simplifying its implementation.

## 6. Implement Optional Clauses in Datalog Engine [deferred]
### Dependencies: None
### Description: Implement support for optional clauses in the Datalog engine. This will allow queries to match entities that may not have a specific triple, such as the `_deleted` flag.
### Details:


## 7. Implement LWW in Datalog Engine [pending]
### Dependencies: None
### Description: Modify the Datalog engine to handle last-write-wins (LWW) semantics by incorporating HLC timestamps into the query logic. This will ensure that only the latest value for each field is returned.
### Details:


